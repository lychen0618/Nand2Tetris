// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // 1. 000 001 010 011
    // 2. 100 101
    // 3. 110
    DMux4Way(in=true, sel=address[13..14], a=sa1, b=sa2, c=sc, d=sk1);
    Or(a=sa1, b=sa2, out=sa);
    Or8Way(in=address[0..7], out=sk21);
    Or8Way(in[0..4]=address[8..12], out=sk22);
    And(a=sk21, b=sk22, out=nsk2);
    Not(in=nsk2, out=sk2);
    And(a=sk1, b=sk2, out=sk);
    DMux4Way(in=load, sel[0]=sa, sel[1]=sc, b=lr, c=ls);
    RAM16K(in=in, load=lr, address=address[0..13], out=rout);
    Screen(in=in, load=ls, address=address[0..12], out=sout);
    Keyboard(out=kout);
    Mux8Way16(b=rout, c=sout, e=kout, sel[0]=sa, sel[1]=sc, sel[2]=sk, out=out);
}